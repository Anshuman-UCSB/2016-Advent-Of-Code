#include <iostream>
#include <fstream>
#include <sstream>


using namespace std;


vector<string> vectorizeString(string inp){
    vector<string> out;
    string build = "";
    for(int i = 0;i<inp.size();i++){
        if(inp[i] ==  '('){
            if(build != ""){
                out.push_back(build);
            }
            build = "(";
            
        }
    }
}


int decompressSize(string inp){
    if (inp.find('(') == string::npos) {
        return inp.size();
    }
    // Assume inp is in format (axb)string-of-size-a
    string first = "";
    int i;
    for(i =0;inp[i] != ')';i++){
        first+=inp[i];
    }
    string second = inp.substr(i+1);
    first+=inp[i];
    cout<<first<<endl<<second<<endl;
    if (second.find('(') == string::npos) {
        return decompressSize(second)*a;
    }
    return -1;
}

int getSize(string inp){
    if(inp.find('(') == string::npos){
        return inp.size();
    }


}

int main(){
    decompressSize("(3x2)ABC");
    exit(1);
    fstream file("input");
    string line, temp;
    string build = "";
    getline(file,line);
    for(int i = 0;i<line.size();i++){
        if(line[i] == '('){
            i++;
            temp = "";
            for(;line[i] != 'x';i++){
                temp+=line[i];
            }
            int a = stoi(temp);
            temp = "";
            i++;
            for (; line[i] != ')'; i++) {
                temp += line[i];
            }
            int b = stoi(temp);
            i++;
            for(int j = 0;j<b;j++)
                build += line.substr(i,a);
            i+=a-1;
        }
        else{
            build+=line[i];
        }
    }
    cout<<build<<endl;
    cout<<build.size()<<endl;
}